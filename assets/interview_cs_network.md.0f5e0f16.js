import{_ as e,o as t,c as i,a as p}from"./app.73ed221c.js";const h=JSON.parse('{"title":"计算机网络","description":"","frontmatter":{},"headers":[{"level":2,"title":"webSocket","slug":"websocket","link":"#websocket","children":[]}],"relativePath":"interview/cs_network.md","lastUpdated":1723030178000}'),l={name:"interview/cs_network.md"},a=p('<h1 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-hidden="true">#</a></h1><h2 id="websocket" tabindex="-1">webSocket <a class="header-anchor" href="#websocket" aria-hidden="true">#</a></h2><p>在 webSocket 出现之前，实现实时通讯采用轮询的方式，耗费了大量的带宽和 CPU 资源。webSocket 更侧重于实时通信，而 HTTP2 更侧重于提高传输效率，所以两者的帧结构也有很大的区别。websocket 不像 HTTP2 那样定义流，也就不存在多路复用、优先级等特性。</p><p>特点：</p><ul><li><p>全双工、二进制帧、协议名（ws、wss）、握手（需要握手才能正式收发数据）。</p></li><li><p>握手的过程为：客户端发送的请求中包含了 Upgrade: websocketConnection: Upgrade，以及一个 base 编码的密文，用于简单的认证密钥。服务器返回 Upgrade: websocketConnection: Upgrade 表示接受 websocket 协议的客户端连接，返回一个密钥用于验证客户端请求报文，防止误连接。</p></li></ul><p>优点：</p><ul><li><p>较少的控制开销：数据包头部协议较小，不同于 HTTP 每次请求需要携带完整的头部。</p></li><li><p>更强的实时性：相对于 HTTP 请求需要等待客户端发起请求服务端才能响应，延迟明显更少，允许服务端主动向客户端推送数据。</p></li><li><p>保持创连接状态：创建通信后，可省略状态信息，不同于 HTTP 每次请求需要携带身份验证。</p></li><li><p>更好的二进制支持：定义了二进制帧，更好处理二进制内容。</p></li><li><p>支持扩展：用户可以扩展 websocket 协议，实现部分自定义的子协议。</p></li><li><p>更好的压缩效果：websocket 在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率。</p></li></ul><p>应用：</p><ul><li><p>弹幕</p></li><li><p>媒体聊天</p></li><li><p>协同编辑</p></li><li><p>基于位置的应用</p></li><li><p>体育实况更新</p></li><li><p>股票基金报价实时更新</p></li></ul>',9),o=[a];function s(c,r,n,_,d,w){return t(),i("div",null,o)}const b=e(l,[["render",s]]);export{h as __pageData,b as default};
