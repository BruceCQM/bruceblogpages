import{_ as l,o as e,c as p,b as s,d as n,a}from"./app.f730f6ec.js";const o="/bruceblogpages/assets/split-chunks.4ff0562f.png",t="/bruceblogpages/assets/module-chunk-bundle.913ac91a.png",c="/bruceblogpages/assets/chunkId.474c3b94.png",vs=JSON.parse('{"title":"webpack 深入学习","description":"","frontmatter":{},"headers":[{"level":2,"title":"webpack 与其它打包工具的不同","slug":"webpack-与其它打包工具的不同","link":"#webpack-与其它打包工具的不同","children":[]},{"level":2,"title":"webapck 工作原理","slug":"webapck-工作原理","link":"#webapck-工作原理","children":[]},{"level":2,"title":"chunk","slug":"chunk","link":"#chunk","children":[{"level":3,"title":"entry 生成 chunk","slug":"entry-生成-chunk","link":"#entry-生成-chunk","children":[]},{"level":3,"title":"按需加载（异步）产生的 chunk","slug":"按需加载-异步-产生的-chunk","link":"#按需加载-异步-产生的-chunk","children":[]},{"level":3,"title":"代码分割产生的 chunk","slug":"代码分割产生的-chunk","link":"#代码分割产生的-chunk","children":[]}]},{"level":2,"title":"bundle","slug":"bundle","link":"#bundle","children":[]},{"level":2,"title":"chunk 和 bundle 的区别","slug":"chunk-和-bundle-的区别","link":"#chunk-和-bundle-的区别","children":[]},{"level":2,"title":"filename & chunkFilename","slug":"filename-chunkfilename","link":"#filename-chunkfilename","children":[]},{"level":2,"title":"命名(hash)","slug":"命名-hash","link":"#命名-hash","children":[]},{"level":2,"title":"chunkId","slug":"chunkid","link":"#chunkid","children":[]},{"level":2,"title":"manifest","slug":"manifest","link":"#manifest","children":[]},{"level":2,"title":"长缓存","slug":"长缓存","link":"#长缓存","children":[]},{"level":2,"title":"开发环境添加缓存","slug":"开发环境添加缓存","link":"#开发环境添加缓存","children":[]},{"level":2,"title":"打包","slug":"打包","link":"#打包","children":[{"level":3,"title":"提取公共代码","slug":"提取公共代码","link":"#提取公共代码","children":[]},{"level":3,"title":"固定 moduleId","slug":"固定-moduleid","link":"#固定-moduleid","children":[]},{"level":3,"title":"固定 chunkId","slug":"固定-chunkid","link":"#固定-chunkid","children":[]},{"level":3,"title":"contenthash","slug":"contenthash","link":"#contenthash","children":[]},{"level":3,"title":"runtime 和 manifest","slug":"runtime-和-manifest","link":"#runtime-和-manifest","children":[]}]},{"level":2,"title":"webpack VS vite","slug":"webpack-vs-vite","link":"#webpack-vs-vite","children":[{"level":3,"title":"冷启动","slug":"冷启动","link":"#冷启动","children":[]},{"level":3,"title":"热更新","slug":"热更新","link":"#热更新","children":[]},{"level":3,"title":"打包一致性","slug":"打包一致性","link":"#打包一致性","children":[]}]},{"level":2,"title":"热更新原理","slug":"热更新原理","link":"#热更新原理","children":[]},{"level":2,"title":"esbuild 为何这么快","slug":"esbuild-为何这么快","link":"#esbuild-为何这么快","children":[]},{"level":2,"title":"常用的 loader 和 plugin","slug":"常用的-loader-和-plugin","link":"#常用的-loader-和-plugin","children":[{"level":3,"title":"loader","slug":"loader","link":"#loader","children":[]},{"level":3,"title":"plugin","slug":"plugin","link":"#plugin","children":[]}]},{"level":2,"title":"Scope Hoisting","slug":"scope-hoisting","link":"#scope-hoisting","children":[{"level":3,"title":"是什么","slug":"是什么","link":"#是什么","children":[]},{"level":3,"title":"打包结果示例","slug":"打包结果示例","link":"#打包结果示例","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"自动开启","slug":"自动开启","link":"#自动开启","children":[]},{"level":3,"title":"手动开启","slug":"手动开启","link":"#手动开启","children":[]}]},{"level":2,"title":"资源管理:file-loader&url-loader","slug":"资源管理-file-loader-url-loader","link":"#资源管理-file-loader-url-loader","children":[]},{"level":2,"title":"分片、按需加载","slug":"分片、按需加载","link":"#分片、按需加载","children":[]},{"level":2,"title":"webpack 实现动态打包换肤","slug":"webpack-实现动态打包换肤","link":"#webpack-实现动态打包换肤","children":[]},{"level":2,"title":"webpack 处理 css","slug":"webpack-处理-css","link":"#webpack-处理-css","children":[]}],"relativePath":"fe/webpack/webpack_deep.md","lastUpdated":1721217546000}'),r={name:"fe/webpack/webpack_deep.md"},i=s("h1",{id:"webpack-深入学习",tabindex:"-1"},[n("webpack 深入学习 "),s("a",{class:"header-anchor",href:"#webpack-深入学习","aria-hidden":"true"},"#")],-1),D=s("h2",{id:"webpack-与其它打包工具的不同",tabindex:"-1"},[n("webpack 与其它打包工具的不同 "),s("a",{class:"header-anchor",href:"#webpack-与其它打包工具的不同","aria-hidden":"true"},"#")],-1),h=s("p",null,"在浏览器中运行 JavaScript 有两种方法。",-1),y=s("p",null,"第一种方式，引用一些脚本来存放每个功能。这种方案很难扩展，因为加载太多脚本会导致网络瓶颈。",-1),d=s("p",null,"第二种方式，使用一个包含所有项目代码的大型 js 文件，但这会导致作用域、文件大小、可读性和可维护性方面的问题。",-1),u=s("p",null,"立即调用函数表达式（IIFE）的出现解决了大型项目的作用域问题。当脚本文件被封装在 IIFE 内部时，可以安全地拼接或安全地组合所有文件，而不必担心作用域冲突。因此诞生了一批 Gulp、Grunt 等任务执行器。",-1),C=s("p",null,"但是这样修改一个文件意味着必须重新构建整个文件，拼接可以做到容易地跨文件重用脚本，但却使构建结果的优化变得更加困难。如何判断代码是否实际被使用？即使你只用到 loadash 中的某个函数，也必须在构建结果中加入整个库，接着将它们压缩到一起。如何 treeshake 代码依赖？难以大规模地实现延迟加载代码块，这需要开发人员手动地进行大量工作。",-1),F=s("p",null,[s("a",{href:"https://webpack.docschina.org/concepts/why-webpack/",link:"static",target:"_blank",rel:"noreferrer"},"为什么选择webpack")],-1),b=a(`<h2 id="webapck-工作原理" tabindex="-1">webapck 工作原理 <a class="header-anchor" href="#webapck-工作原理" aria-hidden="true">#</a></h2><p>通过 <code>fs.readFileSync</code> 读取入口文件，然后通过 <code>@bable/parser</code> 获取 ast 抽象语法树，借助 <code>@babel/core</code> 和 <code>@babel/preset-env</code>，把 ast 语法树转换成合适的代码，最后输出一个文件对象。</p><p>它会以一个或多个文件作为打包的入口，在 webpack 处理不同模块依赖时，会将代码分割成多个 chunk，每个 chunk 包含一个或多个模块，最后将整个项目所有文件编译组合成一个或多个 bundle 输出出去。</p><p>一个 bundle 可以包含多个 chunk，也可以只包含一个 chunk。</p><h2 id="chunk" tabindex="-1">chunk <a class="header-anchor" href="#chunk" aria-hidden="true">#</a></h2><p>chunk 代码块，是 webpack 根据功能拆分出来的。webpack 在处理模块依赖关系时，会将代码分割成多个 chunk，每个 chunk 包含一个或多个模块。</p><p>chunk 的生成是由 webpack 的代码分割功能实现的，可以手动配置或自动分割。chunk 是 webpack 的内部概念，不会直接输出到文件系统中。</p><p>默认情况下，webpack 会在 dist 输出 chunk 生成的 bundle，文件名就是 chunk 名称。该名称最终会体现在 bundle 的命名上，最终随着 bundle 输出。</p><h3 id="entry-生成-chunk" tabindex="-1">entry 生成 chunk <a class="header-anchor" href="#entry-生成-chunk" aria-hidden="true">#</a></h3><p>output.filename 配置输出 chunk 名字。</p><h3 id="按需加载-异步-产生的-chunk" tabindex="-1">按需加载（异步）产生的 chunk <a class="header-anchor" href="#按需加载-异步-产生的-chunk" aria-hidden="true">#</a></h3><p>按需加载（异步）的模块也会产生 chunk，这个 chunk 名称可以在代码中使用 webpackChunkName 自行定义。</p><p>如果需要打包时使用 chunk 名称，则需要在 output.chunkFilename 中引用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">chunkFilename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[name].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/* webpackChunkName: &quot;async-model&quot; */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./async-model</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="代码分割产生的-chunk" tabindex="-1">代码分割产生的 chunk <a class="header-anchor" href="#代码分割产生的-chunk" aria-hidden="true">#</a></h3><p>在 webpack5 中代码分割使用 SplitChunkPlugin 插件实现，这个插件内置在 webpack 中，使用时直接用配置的方式即可。</p><p>代码分割时也会产生 chunk。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">index2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index2.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">index3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index3.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 取值 &#39;multiple&#39; 或 true 都可，根据入口产生多个运行时chunk</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">runtimeChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">multiple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">cacheGroups</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">vendor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">reuseExistingChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">common</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">common</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">minSize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">minChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">reuseExistingChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">🥬  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">111</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index2.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> $ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jquery</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">🥬 222 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> $)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index3.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">🥬 333 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>上述代码，总共会产生 6 个chunk。</p><ul><li><p>两个入口分别分配到名称为 index2 和 index3 的 chunk 中。</p></li><li><p><code>runtimeChunk: &#39;multiple&#39;</code> 的升明，会抽离 webpack 运行时代码到单独的 chunk 中。有两个入口，因此有两份运行时 chunk。</p></li><li><p>jquery 符合 cacheGroups.vendor 规则，抽离到名为 vendor 的 chunk 中。</p></li><li><p>index.js 符合 cacheGroups.common 规则，抽离到名为 common 的 chunk 中。</p></li></ul><p><img src="`+o+'" alt="代码分割产生chunk"></p><h2 id="bundle" tabindex="-1">bundle <a class="header-anchor" href="#bundle" aria-hidden="true">#</a></h2><p>bundle 是 webpack 输出的最终文件，包含了所有的代码和依赖，可以直接在浏览器中运行。</p><p>bundle 就是最终输出一个或多个的文件，大部分情况下一个 chunk 至少会产生一个 bundle，但不完全是一对一的关系。</p><p>比如我们在模块中引用图片，又经过 url-loader 打包到外部；或者是引用了样式，通过 extract-text-webpack-plugin 抽离出来，这样一个 chunk 就会出现产生多个 bundle 的情况。</p><p>在 webpack 中，可以通过配置来控制 bundle 的数量和大小。</p><p>简而言之，bundle 是 chunk 在构建完成的呈现。</p><h2 id="chunk-和-bundle-的区别" tabindex="-1">chunk 和 bundle 的区别 <a class="header-anchor" href="#chunk-和-bundle-的区别" aria-hidden="true">#</a></h2><p>简单来说，chunk 是 webpack 在处理模块依赖关系时产生的中间文件，而 bundle 则是最终的输出文件。chunk 是 webpack 内部的概念，不会直接输出到文件系统中，而 bundle 则是 webpack 输出的最终文件，可以直接在浏览器中运行。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>module、chunk、bundle 其实就是同一份代码，在不同转换场景下的三个名称。</p><p>我们直接写出来的是 module，webpack 处理时是 chunk，最后生成的浏览器可直接运行的是 bundle。</p></div><p><img src="'+t+'" alt="module、chunk和bundle的区别"></p><p>index.css 和 common.js 在 index.js 中被引⼊，打包⽣成的 index.bundle.css 和n index.bundle.js 都属于 chunk 0，utils.js 因为是独⽴打包的，它⽣成的 utils.bundle.js 属于 chunk 1。</p><p>⼀般来说⼀个 chunk 对应⼀个 bundle，⽐如上图中的 utils.js -&gt; chunks 1 -&gt; utils.bundle.js；但也有例外，⽐如说上图中，就⽤ MiniCssExtractPlugin 从 chunks 0 中抽离出了 index.bundle.css ⽂件。</p>',33),A=s("p",null,[s("a",{href:"https://juejin.cn/post/7005530386641977374",link:"static",target:"_blank",rel:"noreferrer"},"webpack 中module、chunk 、bundle 的区别")],-1),k=s("p",null,[s("a",{href:"https://blog.csdn.net/qq_17175013/article/details/119753186",link:"static",target:"_blank",rel:"noreferrer"},"webpack——module、chunk和bundle的区别")],-1),m=s("h2",{id:"filename-chunkfilename",tabindex:"-1"},[n("filename & chunkFilename "),s("a",{class:"header-anchor",href:"#filename-chunkfilename","aria-hidden":"true"},"#")],-1),_=s("p",null,"通过 output 的 filename 和 chunkFilename 控制 chunk 输出的 bundle 命名。",-1),g=s("p",null,[s("a",{href:"https://juejin.cn/post/6844904166150651917",link:"static",target:"_blank",rel:"noreferrer"},"output中chunkFilename和filename的区别")],-1),f=s("p",null,"MiniCssExtractPlugin 也同样有这些字段：",-1),w=s("p",null,[s("a",{href:"https://github.com/VenenoFSD/Learn-Webpack4/issues/17",link:"static",target:"_blank",rel:"noreferrer"},"Webpack - css 文件的代码分割")],-1),v=s("h2",{id:"命名-hash",tabindex:"-1"},[n("命名(hash) "),s("a",{class:"header-anchor",href:"#命名-hash","aria-hidden":"true"},"#")],-1),j=s("p",null,"webpack 文件打包一般有三种 hash：hash、chunkhash、contenthash。",-1),x=s("ul",null,[s("li",null,[s("p",null,"hash 是项目级别的，使用 hash 的缺点是，加入只修改了其中一个文件，但是所有文件的文件名里的 hash 都是相同的。")]),s("li",null,[s("p",null,"chunkhash 根据不同的入口文件(entry)进行依赖文件解析，构建对应的 chunk，生成对应的哈希值。")]),s("li",null,[s("p",null,"contenthash 是针对文件内容级别的，只有自己模块的内容改变，哈希值才会改变。")])],-1),E=s("p",null,[s("a",{href:"https://juejin.cn/post/6844903942384517127",link:"static",target:"_blank",rel:"noreferrer"},"从源码看webpack的hash策略")],-1),S=s("p",null,[s("a",{href:"https://juejin.cn/post/7078589390422802440",link:"static",target:"_blank",rel:"noreferrer"},"webpack中文件打包 hash、chunkhash、contenthash 的区别")],-1),T=a('<p>可以使用 webpack 提供的模板字符串定义 bundle 文件名，下面是常用的模板字符串。</p><table><thead><tr><th>模板</th><th>描述</th><th>稳定性</th></tr></thead><tbody><tr><td>[name]</td><td>chunk 的名称</td><td>只要chunk名称不修改就不会变化</td></tr><tr><td>[hash]</td><td>根据所有 chunk 生成的 hash</td><td>工程某个chunk被修改就会引起变化</td></tr><tr><td>[chunkhash]</td><td>根据chunk生成的hash值</td><td>某个chunk被修改，只会引起被修改的chunk的hash</td></tr><tr><td>[contenthash]</td><td>根据bundle内容生成的hash</td><td>chunk中某个bundle被修改，只会引起被修改的bundle的hash</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">注意事项</p><ol><li>JS 文件的指纹设置 <code>&#39;[name][chunkhash:8].js&#39;</code>。</li></ol><p>JS 文件为什么不用 contenthash？</p><p>因为 JS 引入了 css 模块，若 css 改变，css 使用的是 contenthash，那么 css 的指纹变了。但对于引入 css 的 JS 模块来说，它的内容是没有发生变化的。</p><p>因此如果 js 文件使用 contenthash，则 js 模块的指纹不变，导致 js 无法引入更新后的 css 文件。</p><ol start="2"><li>css 文件的指纹设置 <code>&#39;[name][contenthash:8].css&#39;</code>。</li></ol><p>css 文件为什么不用 chunkhash？</p><p>js 使用的是 chunkhash，如果 js 模块发生改变，则 chunkhash 也会改变，导致它引入的 css 模块的 chunkhash 也跟着改变。</p><p>但这是不合理的，因为 css 文件本身的内容并没有发生改变。</p><p>因此 css 使用 contenthash，只与其自身内容有关，无视被哪个 js 模块引用。</p><ol start="3"><li>Images/Fonts 的指纹设置 <code>&#39;[name][hash:8].[ext]&#39;</code>。</li></ol><p>注意，图片字体的 hash，和 css、js 的 hash 概念不同，是按内容生成的，不是按编译生成的。</p></div><h2 id="chunkid" tabindex="-1">chunkId <a class="header-anchor" href="#chunkid" aria-hidden="true">#</a></h2><p>webpack 在随着 chunk 生成 bundle 时，会输出一个 chunkId。</p><p><img src="'+c+`" alt="chunkId"></p><p>生产环境下 chunkId 是以自增的数字命名，因此增加 chunk 或减少 chunk 时，会导致顺序乱掉。</p><p>chunkId 变了，那么引用到该 chunkId 的文件内容也变了，导致缓存失效。因此我们要固定 chunkId。</p><p>chunkId 生成策略：</p><ul><li><p>false：不使用任何算法，通过插件提供自定义算法。</p></li><li><p>natural：自然数 ID。</p></li><li><p>named：使用 name 值作为 ID，可读性高。</p></li><li><p>size：数字 ID，依据最小的初始下载大小。</p></li><li><p>total-size：数字 ID，依据最小的总下载大小。</p></li><li><p>deterministic: 在不同的编译中不变的短数字 ID。有利于长期缓存，生产模式默认开启。</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">chunkIds</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deterministic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,11),B=s("p",null,[s("a",{href:"https://juejin.cn/post/6844903924818771981",link:"static",target:"_blank",rel:"noreferrer"},"深入理解webpack的chunkId对线上缓存的思考")],-1),I=s("h2",{id:"manifest",tabindex:"-1"},[n("manifest "),s("a",{class:"header-anchor",href:"#manifest","aria-hidden":"true"},"#")],-1),q=s("p",null,"webpack manifest 是一个特殊的文件，它用于记录 webpack 编译后的所有资产（包括 JavaScript、css、图像等）的映射关系。这个映射关系可以帮助我们在代码中更方便地引用这些资产，并且在更新资产时，不用担心因为引用资源的路径改变导致的问题。",-1),P=s("p",null,"通常情况下，webpack manifest 会在生产构建中启用，并将其写入到磁盘的一个特定位置，以便在运行时可以快速访问。在生产环境使用 webpack manifest 可以提高应用程序的性能和可靠性。",-1),M=s("h2",{id:"长缓存",tabindex:"-1"},[n("长缓存 "),s("a",{class:"header-anchor",href:"#长缓存","aria-hidden":"true"},"#")],-1),V=s("p",null,[s("a",{href:"https://johninch.github.io/Roundtable/Question-Bank/webpack/chunkhash.html#%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9chunkhash",link:"static",target:"_blank",rel:"noreferrer"},"持久化缓存caching（注意id问题）")],-1),N=s("p",null,[s("a",{href:"https://juejin.cn/post/7136876121886785550#heading-1",link:"static",target:"_blank",rel:"noreferrer"},"持久性缓存来提高构建性能")],-1),R=s("p",null,[s("a",{href:"https://zhuanlan.zhihu.com/p/376543854",link:"static",target:"_blank",rel:"noreferrer"},"webpack缓存原理")],-1),z=s("p",null,[s("a",{href:"https://juejin.cn/post/7088552132260921352",link:"static",target:"_blank",rel:"noreferrer"},"深度解析webpack5持久化缓存")],-1),H=a(`<h2 id="开发环境添加缓存" tabindex="-1">开发环境添加缓存 <a class="header-anchor" href="#开发环境添加缓存" aria-hidden="true">#</a></h2><p>cache + snapshot：相关的配置决定了缓存内存生成 snapshot 时所采用的策略(timestamps|content hash|timestamps + content hash)，而这个策略最终会影响到缓存是否失效，即 webpack 是否决定来使用缓存。</p><p>hard-source-webpack-plugin 和 cache-loader 都是用来优化 webpack 打包性能的插件，它们的作用是缓存 webpack 的构建结果，以避免每次重新构建都需要重新执行耗时的操作，从而提高打包速度。</p><p>然而，这两个插件的工作方式和适用场景略有不同。</p><p>hard-source-webpack-plugin 会缓存 webpack 的中间输出文件（即构建过程中生成的代码），并且会将缓存存储到本地磁盘中。这个插件适用于比较大型的项目，它可以显著地减少重新构建的时间，特别是在增量构建(incremental build)场景下表现优秀。</p><p>cache-loader 则是一个通用的 loader，它可以用来缓存任何 loader 的输出结果，包括 JavaScript、css、图片等。这个插件会将 loader 的输出结果存储到内存中，所以相对于 hard-source-webpack-plugin，它的缓存速度更快，但是存储的内容也更有限。cache-loader 适用于需要频繁使用的 loader，例如 babel-loader、sass-loader 等。</p><p>如果需要缓存 webpack 的中间输出文件，那么使用 hard-source-webpack-plugin 插件。</p><p>如果只需要缓存某个 loader 的输出结果，那么使用 cache-loader 插件更方便。</p><p>当然，也可以一起使用，进一步提高 webpack 的打包速度。</p><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-hidden="true">#</a></h2><h3 id="提取公共代码" tabindex="-1">提取公共代码 <a class="header-anchor" href="#提取公共代码" aria-hidden="true">#</a></h3><p>每个分离出来的 chunk 会包含 webpack 的 runtime 代码（用来解析和加载模块之类的运行时代码），所以即使该 chunk 没有改变，同一个 chunk 其它代码改变了，chunkhash 的值也会改变，因此需要提取这部分代码，单独打成一个 chunk。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">runtimeChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">manifest</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="固定-moduleid" tabindex="-1">固定 moduleId <a class="header-anchor" href="#固定-moduleid" aria-hidden="true">#</a></h3><p>模块 id 默认是按引入的顺序排序的，所以即使文件内容没有改变，引入文件的顺序变动了，chunkhash 可能也会变动，因此模块 id 的排序规则也要改变。</p><p>development 下默认采用路径的方式。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">namedModules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>生产环境使用全路径，有点太长，可以使用 HashedModuleIdsPlugin 插件来根据路径生成 hash。</p><h3 id="固定-chunkid" tabindex="-1">固定 chunkId <a class="header-anchor" href="#固定-chunkid" aria-hidden="true">#</a></h3><p>默认情况，生产环境下 chunkId 是以自增的数字命名，因此增加 chunk 或减少 chunk 时，会导致顺序乱掉。所以我们要固定 chunkId。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 默认情况下，开发环境为 true，生产环境为 false</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">namedChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">为什么默认情况下，开发环境为 true，生产环境为 false？</p><p>固定 chunkId 会导致：打包大小增加一点；chunk 名称暴露。</p></div><h3 id="contenthash" tabindex="-1">contenthash <a class="header-anchor" href="#contenthash" aria-hidden="true">#</a></h3><p>chunkhash 根据不同的入口文件进行依赖文件解析、构建对应的 chunk，生成对应的哈希值。只要我们不改动代码，就可以保证其哈希值不受影响。</p><p>css 文件使用 contenthash，这样不受 js 模块变化影响。</p><p>js 内部会引用 css 文件，共同组成一个 chunk。</p><h3 id="runtime-和-manifest" tabindex="-1">runtime 和 manifest <a class="header-anchor" href="#runtime-和-manifest" aria-hidden="true">#</a></h3><p>webpack 通过 runtime 和 manifest 来管理所有模块的交互。</p><div class="tip custom-block"><p class="custom-block-title">runtime</p><p>runtime，以及伴随的 manifest 数据，主要是指：在浏览器运行过程中，webpack 用来连接模块化应用程序所需的所有代码。它包含：在模块交互时，连接模块所需的加载和解析逻辑。包括已经加载到浏览器中的连接模块逻辑，以及尚未加载模块的延迟加载逻辑。</p></div><div class="tip custom-block"><p class="custom-block-title">manifest</p><p>当 compiler 开始执⾏、解析和映射应⽤程序时，它会保留所有模块的详细要点。这个数据集合称为 &quot;manifest&quot;。</p><p>当完成打包并发送到浏览器时，runtime 会通过 manifest 来解析和加载模块。⽆论你选择哪种 模块语法，那些 import 或 require 语句现在都已经转换为 webpack_require ⽅法，此⽅法指向模块标识符(module identifier)。</p><p>通过使⽤manifest 中的数据，runtime 将能够检索这些标识符，找出每个标识符背后对应的模块。</p></div><p>runtime 和 manifest 是一个每次打包都可能变化的不稳定因素，所以它会导致一些问题。比如，我们对整个项目的文章在做一次打包，打包结果如下，结果发现什么也没改动，但是 hash 全部发生变化，原因就是 runtime 和 manifest 这些所谓的样板文件。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">Asset</span><span style="color:#A6ACCD;">           </span><span style="color:#C3E88D;">Size</span><span style="color:#A6ACCD;">            </span><span style="color:#C3E88D;">Chunks</span><span style="color:#A6ACCD;">                            </span><span style="color:#C3E88D;">Chunk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Names</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#FFCB6B;">css/app.2f3933e.css</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">52</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bytes</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">immutable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">app</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">css/list.2f3933e.css</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1.5</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">immutable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">list</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">css/vendors.2f3933e.css</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">71.2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">immutable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">vendors</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">css/vendors.2f3933e.css.gz</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">7.85</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#FFCB6B;">index.html</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">1.33</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">js/app.2f3933e.js</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">6.63</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">immutable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">app</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#FFCB6B;">js/list.2f3933e.js</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">50.9</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">immutable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">list</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">js/list.2f3933e.js.LICENSE</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">120</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bytes</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">js/list.2f3933e.js.gz</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">js/vendors.2f3933e.js</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">340</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">immutable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">big</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">vendors</span></span>
<span class="line"><span style="color:#FFCB6B;">js/vendors.2f3933e.js.LICENSE</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">423</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bytes</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">js/vendors.2f3933e.js.gz</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">91.8</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KiB</span><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">js/work.2f3933e.js</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">188</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bytes</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">emitted</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">immutable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">work</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如何解决这个问题？我们可以把 runtime 和 manifest 提取出来，去掉这两个不稳定因素，接着打包发现 hash 并未改变，但是多了一个 manifest 文件。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">runtimeChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">manifest</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>再次打包代码，不断打包 hash 都不会变。</p>`,35),J=s("p",null,[s("a",{href:"https://juejin.cn/post/7110748046853406756",link:"static",target:"_blank",rel:"noreferrer"},"一文搞懂webpack hash持久化")],-1),W=a('<h2 id="webpack-vs-vite" tabindex="-1">webpack VS vite <a class="header-anchor" href="#webpack-vs-vite" aria-hidden="true">#</a></h2><p>思考：webpack 按需加载和 vite 按需加载的区别。</p><p>vite 主要有以下特点：</p><ul><li><p>快速的冷启动。</p></li><li><p>即时的模块热更新。</p></li><li><p>真正的按需编译。</p></li></ul><h3 id="冷启动" tabindex="-1">冷启动 <a class="header-anchor" href="#冷启动" aria-hidden="true">#</a></h3><p>webpack 等传统构建式打包工具，在冷启动开发服务器时，首先会将我们的整个代码库中的源代码和 node_modules 进行转换、编译(Babel、PostCSS)和打包，最终将打包好的文件推送到浏览器。</p><p>vite、snowpack 这类非构建式打包工具，在冷启动开发服务器时，无需分析模块依赖，也不需要编译，通过 ES Module 自动向依赖的资源发出请求，因此启动速度非常快。当浏览器请求某个模块时，再根据需要对模块内容进行编译。</p><h3 id="热更新" tabindex="-1">热更新 <a class="header-anchor" href="#热更新" aria-hidden="true">#</a></h3><p>在 webpack 中，当代码某个依赖发生改变，webpack 会检查当前的依赖关系并重新打包。当依赖关系复杂时，就算只修改一个文件，热更新的速度也会越来越慢。在实践中我们发现，即使是 HMR，更新速度也会随着应用规模的增长而显著下降。</p><p>在 vite 中，HMR 是在原生 ESM 上执行的。当编辑一个文件时，vite 只需要精确地使已编辑的模块一起最近的 HMR 边界之间的链失效（大多数时候只需要模块本身），使 HMR 更新始终快速，无论应用的大小。同时 vite 利用 http 来加速整个页面的重新加载，对于源码模块的请求会根据 304 状态码进行协商缓存，而外部依赖模块的请求则会设置为强缓存，因此一旦被缓存它们将不需要再次请求。</p><h3 id="打包一致性" tabindex="-1">打包一致性 <a class="header-anchor" href="#打包一致性" aria-hidden="true">#</a></h3><p>在构建这一块，vite 在开发服务器与产品最终构建结果没有 webpack 一致性强。</p><p>主要原因是，为了在生产环境获得最佳的加载性能和兼容性，还是需要将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存），所以 vite 选择了 rollup 进行产品最终构建打包。</p>',13),L=s("p",null,[s("a",{href:"https://juejin.cn/post/7109475126810411044",link:"static",target:"_blank",rel:"noreferrer"},"前端工程化vite与webpack的优缺点对比")],-1),K=s("p",null,[s("a",{href:"https://juejin.cn/post/7097493230572273700#heading-26",link:"static",target:"_blank",rel:"noreferrer"},"rollup，vite以及webpack比较与介绍")],-1),O=a('<h2 id="热更新原理" tabindex="-1">热更新原理 <a class="header-anchor" href="#热更新原理" aria-hidden="true">#</a></h2><p>webpack 热更新，是基于 WDS(webpack-dev-server)的模块热替换，只需要局部刷新页面上发生变化的模块，同时可以保留当前的页面状态，比如复选框的选中状态、输入框的输入等，增量更新。</p><ol><li>WDS 工作流程。</li></ol><ul><li><p>启动 webpack，生成 compiler 实例。compiler 上有很多方法，比如可以启动 webpack 所有编译工作，以及监听本地文件的变化。</p></li><li><p>使用 express 框架启动本地 server，让浏览器可以请求本地的静态资源。</p></li><li><p>本地 server 启动之后，再去启动 websocket 服务。通过 websocket，可以建立本地服务和浏览器的双向通信，这样就可以实现当本地文件发生变化，立马告知浏览器可以热更新代码。</p></li></ul><ol start="2"><li>监听文件变化。</li></ol><p>此时用到了 webpack-dev-middleware 库。很多人分不清 webpack-dev-middleware 和 webpack-dev-server 的区别。webpack-dev-server 只负责启动服务和前置准备工作，所有文件相关的操作都抽离到 webpack-dev-middleware 库了，主要是本地文件的编译和输出以及监听。职责的划分更清晰。</p><p>此时调用 compiler.watch 方法，改方法主要做了 2 件事。</p><ul><li><p>首先对本地文件代码进行编译打包，也就是 webpack 的一系列编译流程。</p></li><li><p>其次，编译结束后，开启对本地文件的监听，当文件发生变化，重新编译，编译完成之后继续监听。</p></li></ul><p>为什么代码的改动保存会自动编译、重新打包？这一系列的重新检测编译归功于 compiler.watch 方法。监听本地文件的变化主要通过<strong>文件的生成时间</strong>是否有变化。</p><ol start="3"><li>通知浏览器进行热更新。此时浏览器得到的 bundle 文件里面，内嵌了两个重要的代码逻辑片段，即 websocket 的客户端以及 HotModuleReplacementPlugin。</li></ol><p>websocket 和服务端连接，并注册了 2 个监听事件。</p><ul><li><p>hash 事件，更新最新一次打包后的 hash 值。</p></li><li><p>ok 事件，进行热更新检查。</p></li></ul><ol start="4"><li>浏览器开始热更新</li></ol><p>websocket 监听到 ok 事件后调用 module.hot.check 开始热更新，该方法利用上一次保存的 hash 值，发送 ajax 请求；请求结果获取热更新模块，以及下次热更新的 hash 标识，并进入热更新准备阶段。</p><p>发送 ajax 请求时，使用的是 JSONP 的方法，因为 json 获取的代码可以直接执行，立马进行热更新。</p><ol start="5"><li>热替换流程。</li></ol><p>删除旧模块，将新的模块添加到 modules 中，通过 <code>__webpack_require__</code> 执行相关模块的代码。</p>',17),U=s("p",null,[s("a",{href:"https://juejin.cn/post/6844904008432222215#heading-7",link:"static",target:"_blank",rel:"noreferrer"},"轻松理解webpack热更新原理")],-1),$=s("p",null,[s("a",{href:"https://juejin.cn/post/6885348399924084744",link:"static",target:"_blank",rel:"noreferrer"},"webpack热加载的实现原理")],-1),G=s("p",null,[s("a",{href:"https://blog.csdn.net/bigname22/article/details/127362168",link:"static",target:"_blank",rel:"noreferrer"},"webpack热更新原理-连阿珍都看懂了")],-1),Q=s("h2",{id:"esbuild-为何这么快",tabindex:"-1"},[n("esbuild 为何这么快 "),s("a",{class:"header-anchor",href:"#esbuild-为何这么快","aria-hidden":"true"},"#")],-1),X=s("ol",null,[s("li",null,[s("p",null,"js 是单线程串行，esbuild 是新开一个进程，然后多线程并行，充分发挥多核优势。")]),s("li",null,[s("p",null,"go 是纯机器码，肯定要比 JIT 快。")]),s("li",null,[s("p",null,"不使用 AST，优化了构建流程。")])],-1),Y=s("p",null,[s("a",{href:"https://juejin.cn/post/7097493230572273700#heading-26",link:"static",target:"_blank",rel:"noreferrer"},"rollup，vite以及webpack比较与介绍")],-1),Z=a('<h2 id="常用的-loader-和-plugin" tabindex="-1">常用的 loader 和 plugin <a class="header-anchor" href="#常用的-loader-和-plugin" aria-hidden="true">#</a></h2><h3 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-hidden="true">#</a></h3><ul><li><p>babel-loader：把 ES6 转换成 ES5</p></li><li><p>less-loader：将less代码转换成CSS</p></li><li><p>css-loader：加载 CSS，⽀持模块化、压缩、⽂件导⼊等特性</p></li><li><p>style-loader：把 CSS 代码注⼊到 JavaScript 中，通过 DOM 操作去加载 CSS</p></li><li><p>eslint-loader：通过 ESLint 检查 JavaScript 代码</p></li><li><p>vue-loader：加载 Vue.js 单⽂件组件</p></li><li><p>cache-loader: 可以在⼀些性能开销较⼤的 Loader 之前添加，⽬的是将结果缓存到磁盘⾥</p></li><li><p>file-loader：把⽂件输出到⼀个⽂件夹中，在代码中通过相对 URL 去引⽤输出的⽂件 (处理图⽚和字体)</p></li><li><p>url-loader：与 file-loader 类似，区别是⽤户可以设置⼀个阈值，⼤于阈值时返回其 publicPath，⼩于阈值时返回⽂件 base64 形式编码 (处理图⽚和字体)</p></li></ul><h3 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-hidden="true">#</a></h3><ul><li><p>CopyWebpackPlugin：将单个⽂件或整个⽬录复制到构建⽬录</p></li><li><p>HtmlWebapckPlugin：简单创建 HTML ⽂件，⽤于服务器访问</p></li><li><p>MiniCssExtractPlugin: 分离样式⽂件，CSS 提取为独⽴⽂件，⽀持按需加载 (替代extract-text-Webpack-plugin)</p></li><li><p>ParallelUglifyPlugin: 多进程执⾏js代码压缩，提升构建速度</p></li><li><p>TerserWebpackPlugin，多进程执⾏js代码压缩，⽀持抽离注释⽂件以及⽀持多种压缩⽅式（terserMinify、UglifyJS、SWC等）</p></li><li><p>postcss-sprites：自动生成精灵图</p></li></ul>',5),ss=s("p",null,[s("a",{href:"https://juejin.cn/post/6844903795512573966",link:"static",target:"_blank",rel:"noreferrer"},"使用 webpack 的各种插件提升你的开发效率")],-1),ns=a(`<h2 id="scope-hoisting" tabindex="-1">Scope Hoisting <a class="header-anchor" href="#scope-hoisting" aria-hidden="true">#</a></h2><h3 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-hidden="true">#</a></h3><p>Scope Hoisting 是 webpack 作用域提升，它是 webpack 的内置优化，在生产环境打包时会自动开启。</p><p>在没有开启 scope hoisting 时，webpack 会将每个模块的代码放在一个独立的函数环境中，这样做是为了保证模块的作用域互不干扰。</p><p>而 scope hoisting 的作用相反，是把多个模块的代码合并到一个函数作用域中执行。在这一过程中，webpack 会按照正确顺序合并模块代码，同时对涉及的标识符做适当处理以避免重名。</p><p>这样做的好处是减少了函数调用，对运行效率有一定提升，同时也降低了打包体积。</p><p>但 scope hoisting 的启用是有前提的，如果遇到某些模块多次被其它模块引用，或者使用了动态导入的模块，或者是非 ESM 的模块，都不会有 scope hoisting。</p><h3 id="打包结果示例" tabindex="-1">打包结果示例 <a class="header-anchor" href="#打包结果示例" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>没有使用 scope hoisting 的打包结果如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  (</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_exports__</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__WEBPACK_IMPORTED_MODULE_0__main_js__</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__WEBPACK_IMPORTED_MODULE_0__main_js__</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  (</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_exports__</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">__webpack_exports__</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>使用 scope hoisting 的打包结果如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  (</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_exports__</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">main</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">main</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>对比两种打包方式输出的代码，可以看到，启用 scope hoisting 后，函数声明变成一个，main.js 中定义的内容直接注入到 index.js 中。</p><p>这么做有两点好处：</p><ul><li><p><strong>代码体积更小</strong>，因为函数声明语句会产生大量代码，导致包体积增加，模块越多越明显。</p></li><li><p>代码在运行时，因为创建的函数作用域更少，<strong>内存开销也随之变小</strong>。</p></li></ul><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-hidden="true">#</a></h3><p>scope hoisting 的实现原理很简单：分析出模块之间的依赖关系，尽可能将打散的模块合并到一个函数中，前提是不能造成代码冗余。因此，<strong>只有那些被引用了一次的模块才能被合并</strong>。</p><p>由于 scope hoisting 需要分析出模块之间的依赖关系，因此源码<strong>必需采用 ES6 模块化语句</strong>，否则无法生效。</p><h3 id="自动开启" tabindex="-1">自动开启 <a class="header-anchor" href="#自动开启" aria-hidden="true">#</a></h3><p>将 webpack 的 mode 设置为 production，scope hoisting 会自动开启。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="手动开启" tabindex="-1">手动开启 <a class="header-anchor" href="#手动开启" aria-hidden="true">#</a></h3><p>在 webpack 中已经内置了 scope hoisting，所以用起来很简单，只需要配置 ModuleConcatenationPlugin 插件。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> webpack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> webpack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">optimize</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ModuleConcatenationPlugin</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,25),as=s("p",null,[s("a",{href:"https://juejin.cn/post/6850418110983241741",link:"static",target:"_blank",rel:"noreferrer"},"了不起的 Webpack Scope Hoisting 学习指南")],-1),ls=s("h2",{id:"资源管理-file-loader-url-loader",tabindex:"-1"},[n("资源管理:file-loader&url-loader "),s("a",{class:"header-anchor",href:"#资源管理-file-loader-url-loader","aria-hidden":"true"},"#")],-1),es=s("p",null,[s("a",{href:"https://juejin.cn/post/7000225935215558687",link:"static",target:"_blank",rel:"noreferrer"},"Webpack 中 file-loader 和 url-loader 的区别")],-1),ps=s("h2",{id:"分片、按需加载",tabindex:"-1"},[n("分片、按需加载 "),s("a",{class:"header-anchor",href:"#分片、按需加载","aria-hidden":"true"},"#")],-1),os=s("p",null,"require.ensure 或 require.include 实现依赖前置。",-1),ts=s("p",null,[s("a",{href:"https://mp.weixin.qq.com/s/MRhEJOiijLVsbHH6BoQisw",link:"static",target:"_blank",rel:"noreferrer"},"Webpack 实用技巧高效实战")],-1),cs=s("h2",{id:"webpack-实现动态打包换肤",tabindex:"-1"},[n("webpack 实现动态打包换肤 "),s("a",{class:"header-anchor",href:"#webpack-实现动态打包换肤","aria-hidden":"true"},"#")],-1),rs=s("p",null,"首次加载只引用默认主题文件，其它的可以到切换的时候再引入。",-1),is=s("p",null,"因此只需要解决编译多套 css 输出的问题，和不让 css 注入 HTML 的问题就好。",-1),Ds=s("p",null,[s("a",{href:"https://juejin.cn/post/6844903596992135182#heading-3",link:"static",target:"_blank",rel:"noreferrer"},"webpack 换肤功能多主题/配色样式打包解决方案")],-1),hs=s("p",null,[s("a",{href:"https://juejin.cn/post/7206909221806981175#heading-2",link:"static",target:"_blank",rel:"noreferrer"},"前端构建工具vite进阶系列(三) -- 静态资源与css模块化的处理")],-1),ys=s("p",null,[s("a",{href:"https://juejin.cn/post/7129128214735093791",link:"static",target:"_blank",rel:"noreferrer"},"基于 webpack 项目接入 vite 你可能需要注意的点")],-1),ds=s("h2",{id:"webpack-处理-css",tabindex:"-1"},[n("webpack 处理 css "),s("a",{class:"header-anchor",href:"#webpack-处理-css","aria-hidden":"true"},"#")],-1),us=s("p",null,"处理 css-loader 中的 @import 需要使用 importLoaders。",-1),Cs=s("p",null,[s("a",{href:"https://juejin.cn/post/7083776122587971597",link:"static",target:"_blank",rel:"noreferrer"},"如何使用webpack提取和压缩CSS并处理兼容性")],-1),Fs=[i,D,h,y,d,u,C,F,b,A,k,m,_,g,f,w,v,j,x,E,S,T,B,I,q,P,M,V,N,R,z,H,J,W,L,K,O,U,$,G,Q,X,Y,Z,ss,ns,as,ls,es,ps,os,ts,cs,rs,is,Ds,hs,ys,ds,us,Cs];function bs(As,ks,ms,_s,gs,fs){return e(),p("div",null,Fs)}const js=l(r,[["render",bs]]);export{vs as __pageData,js as default};
