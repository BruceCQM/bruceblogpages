import{_ as l,o as e,c as p,b as s,d as n,a}from"./app.fb5335e3.js";const c="/bruceblogpages/assets/split-chunks.4ff0562f.png",o="/bruceblogpages/assets/module-chunk-bundle.913ac91a.png",t="/bruceblogpages/assets/chunkId.474c3b94.png",L=JSON.parse('{"title":"webpack 深入学习","description":"","frontmatter":{},"headers":[{"level":2,"title":"webpack 与其它打包工具的不同","slug":"webpack-与其它打包工具的不同","link":"#webpack-与其它打包工具的不同","children":[]},{"level":2,"title":"webapck 工作原理","slug":"webapck-工作原理","link":"#webapck-工作原理","children":[]},{"level":2,"title":"chunk","slug":"chunk","link":"#chunk","children":[{"level":3,"title":"entry 生成 chunk","slug":"entry-生成-chunk","link":"#entry-生成-chunk","children":[]},{"level":3,"title":"按需加载（异步）产生的 chunk","slug":"按需加载-异步-产生的-chunk","link":"#按需加载-异步-产生的-chunk","children":[]},{"level":3,"title":"代码分割产生的 chunk","slug":"代码分割产生的-chunk","link":"#代码分割产生的-chunk","children":[]}]},{"level":2,"title":"bundle","slug":"bundle","link":"#bundle","children":[]},{"level":2,"title":"chunk 和 bundle 的区别","slug":"chunk-和-bundle-的区别","link":"#chunk-和-bundle-的区别","children":[]},{"level":2,"title":"filename & chunkFilename","slug":"filename-chunkfilename","link":"#filename-chunkfilename","children":[]},{"level":2,"title":"命名(hash)","slug":"命名-hash","link":"#命名-hash","children":[]},{"level":2,"title":"chunkId","slug":"chunkid","link":"#chunkid","children":[]},{"level":2,"title":"manifest","slug":"manifest","link":"#manifest","children":[]}],"relativePath":"fe/webpack/webpack_deep.md","lastUpdated":1720496202000}'),r={name:"fe/webpack/webpack_deep.md"},i=s("h1",{id:"webpack-深入学习",tabindex:"-1"},[n("webpack 深入学习 "),s("a",{class:"header-anchor",href:"#webpack-深入学习","aria-hidden":"true"},"#")],-1),u=s("h2",{id:"webpack-与其它打包工具的不同",tabindex:"-1"},[n("webpack 与其它打包工具的不同 "),s("a",{class:"header-anchor",href:"#webpack-与其它打包工具的不同","aria-hidden":"true"},"#")],-1),h=s("p",null,"在浏览器中运行 JavaScript 有两种方法。",-1),D=s("p",null,"第一种方式，引用一些脚本来存放每个功能。这种方案很难扩展，因为加载太多脚本会导致网络瓶颈。",-1),d=s("p",null,"第二种方式，使用一个包含所有项目代码的大型 js 文件，但这会导致作用域、文件大小、可读性和可维护性方面的问题。",-1),y=s("p",null,"立即调用函数表达式（IIFE）的出现解决了大型项目的作用域问题。当脚本文件被封装在 IIFE 内部时，可以安全地拼接或安全地组合所有文件，而不必担心作用域冲突。因此诞生了一批 Gulp、Grunt 等任务执行器。",-1),F=s("p",null,"但是这样修改一个文件意味着必须重新构建整个文件，拼接可以做到容易地跨文件重用脚本，但却使构建结果的优化变得更加困难。如何判断代码是否实际被使用？即使你只用到 loadash 中的某个函数，也必须在构建结果中加入整个库，接着将它们压缩到一起。如何 treeshake 代码依赖？难以大规模地实现延迟加载代码块，这需要开发人员手动地进行大量工作。",-1),b=s("p",null,[s("a",{href:"https://webpack.docschina.org/concepts/why-webpack/",link:"card",target:"_blank",rel:"noreferrer"},"为什么选择webpack")],-1),k=a(`<h2 id="webapck-工作原理" tabindex="-1">webapck 工作原理 <a class="header-anchor" href="#webapck-工作原理" aria-hidden="true">#</a></h2><p>通过 <code>fs.readFileSync</code> 读取入口文件，然后通过 <code>@bable/parser</code> 获取 ast 抽象语法树，借助 <code>@babel/core</code> 和 <code>@babel/preset-env</code>，把 ast 语法树转换成合适的代码，最后输出一个文件对象。</p><p>它会以一个或多个文件作为打包的入口，在 webpack 处理不同模块依赖时，会将代码分割成多个 chunk，每个 chunk 包含一个或多个模块，最后将整个项目所有文件编译组合成一个或多个 bundle 输出出去。</p><p>一个 bundle 可以包含多个 chunk，也可以只包含一个 chunk。</p><h2 id="chunk" tabindex="-1">chunk <a class="header-anchor" href="#chunk" aria-hidden="true">#</a></h2><p>chunk 代码块，是 webpack 根据功能拆分出来的。webpack 在处理模块依赖关系时，会将代码分割成多个 chunk，每个 chunk 包含一个或多个模块。</p><p>chunk 的生成是由 webpack 的代码分割功能实现的，可以手动配置或自动分割。chunk 是 webpack 的内部概念，不会直接输出到文件系统中。</p><p>默认情况下，webpack 会在 dist 输出 chunk 生成的 bundle，文件名就是 chunk 名称。该名称最终会体现在 bundle 的命名上，最终随着 bundle 输出。</p><h3 id="entry-生成-chunk" tabindex="-1">entry 生成 chunk <a class="header-anchor" href="#entry-生成-chunk" aria-hidden="true">#</a></h3><p>output.filename 配置输出 chunk 名字。</p><h3 id="按需加载-异步-产生的-chunk" tabindex="-1">按需加载（异步）产生的 chunk <a class="header-anchor" href="#按需加载-异步-产生的-chunk" aria-hidden="true">#</a></h3><p>按需加载（异步）的模块也会产生 chunk，这个 chunk 名称可以在代码中使用 webpackChunkName 自行定义。</p><p>如果需要打包时使用 chunk 名称，则需要在 output.chunkFilename 中引用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">chunkFilename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[name].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/* webpackChunkName: &quot;async-model&quot; */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./async-model</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="代码分割产生的-chunk" tabindex="-1">代码分割产生的 chunk <a class="header-anchor" href="#代码分割产生的-chunk" aria-hidden="true">#</a></h3><p>在 webpack5 中代码分割使用 SplitChunkPlugin 插件实现，这个插件内置在 webpack 中，使用时直接用配置的方式即可。</p><p>代码分割时也会产生 chunk。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">index2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index2.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">index3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index3.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 取值 &#39;multiple&#39; 或 true 都可，根据入口产生多个运行时chunk</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">runtimeChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">multiple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">cacheGroups</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">vendor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">reuseExistingChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">common</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">common</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">minSize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">minChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">reuseExistingChunk</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">🥬  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">111</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index2.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> $ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jquery</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">🥬 222 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> $)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index3.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">🥬 333 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>上述代码，总共会产生 6 个chunk。</p><ul><li><p>两个入口分别分配到名称为 index2 和 index3 的 chunk 中。</p></li><li><p><code>runtimeChunk: &#39;multiple&#39;</code> 的升明，会抽离 webpack 运行时代码到单独的 chunk 中。有两个入口，因此有两份运行时 chunk。</p></li><li><p>jquery 符合 cacheGroups.vendor 规则，抽离到名为 vendor 的 chunk 中。</p></li><li><p>index.js 符合 cacheGroups.common 规则，抽离到名为 common 的 chunk 中。</p></li></ul><p><img src="`+c+'" alt="代码分割产生chunk"></p><h2 id="bundle" tabindex="-1">bundle <a class="header-anchor" href="#bundle" aria-hidden="true">#</a></h2><p>bundle 是 webpack 输出的最终文件，包含了所有的代码和依赖，可以直接在浏览器中运行。</p><p>bundle 就是最终输出一个或多个的文件，大部分情况下一个 chunk 至少会产生一个 bundle，但不完全是一对一的关系。</p><p>比如我们在模块中引用图片，又经过 url-loader 打包到外部；或者是引用了样式，通过 extract-text-webpack-plugin 抽离出来，这样一个 chunk 就会出现产生多个 bundle 的情况。</p><p>在 webpack 中，可以通过配置来控制 bundle 的数量和大小。</p><p>简而言之，bundle 是 chunk 在构建完成的呈现。</p><h2 id="chunk-和-bundle-的区别" tabindex="-1">chunk 和 bundle 的区别 <a class="header-anchor" href="#chunk-和-bundle-的区别" aria-hidden="true">#</a></h2><p>简单来说，chunk 是 webpack 在处理模块依赖关系时产生的中间文件，而 bundle 则是最终的输出文件。chunk 是 webpack 内部的概念，不会直接输出到文件系统中，而 bundle 则是 webpack 输出的最终文件，可以直接在浏览器中运行。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>module、chunk、bundle 其实就是同一份代码，在不同转换场景下的三个名称。</p><p>我们直接写出来的是 module，webpack 处理时是 chunk，最后生成的浏览器可直接运行的是 bundle。</p></div><p><img src="'+o+'" alt="module、chunk和bundle的区别"></p><p>index.css 和 common.js 在 index.js 中被引⼊，打包⽣成的 index.bundle.css 和n index.bundle.js 都属于 chunk 0，utils.js 因为是独⽴打包的，它⽣成的 utils.bundle.js 属于 chunk 1。</p><p>⼀般来说⼀个 chunk 对应⼀个 bundle，⽐如上图中的 utils.js -&gt; chunks 1 -&gt; utils.bundle.js；但也有例外，⽐如说上图中，就⽤ MiniCssExtractPlugin 从 chunks 0 中抽离出了 index.bundle.css ⽂件。</p>',33),C=s("p",null,[s("a",{href:"https://juejin.cn/post/7005530386641977374",link:"card",target:"_blank",rel:"noreferrer"},"webpack 中module、chunk 、bundle 的区别")],-1),A=s("p",null,[s("a",{href:"https://blog.csdn.net/qq_17175013/article/details/119753186",link:"card",target:"_blank",rel:"noreferrer"},"webpack——module、chunk和bundle的区别")],-1),m=s("h2",{id:"filename-chunkfilename",tabindex:"-1"},[n("filename & chunkFilename "),s("a",{class:"header-anchor",href:"#filename-chunkfilename","aria-hidden":"true"},"#")],-1),_=s("p",null,"通过 output 的 filename 和 chunkFilename 控制 chunk 输出的 bundle 命名。",-1),f=s("p",null,[s("a",{href:"https://juejin.cn/post/6844904166150651917",link:"card",target:"_blank",rel:"noreferrer"},"output中chunkFilename和filename的区别")],-1),g=s("p",null,"MiniCssExtractPlugin 也同样有这些字段：",-1),w=s("p",null,[s("a",{href:"https://github.com/VenenoFSD/Learn-Webpack4/issues/17",link:"card",target:"_blank",rel:"noreferrer"},"Webpack - css 文件的代码分割")],-1),x=s("h2",{id:"命名-hash",tabindex:"-1"},[n("命名(hash) "),s("a",{class:"header-anchor",href:"#命名-hash","aria-hidden":"true"},"#")],-1),j=s("p",null,"webpack 文件打包一般有三种 hash：hash、chunkhash、contenthash。",-1),v=s("ul",null,[s("li",null,[s("p",null,"hash 是项目级别的，使用 hash 的缺点是，加入只修改了其中一个文件，但是所有文件的文件名里的 hash 都是相同的。")]),s("li",null,[s("p",null,"chunkhash 根据不同的入口文件(entry)进行依赖文件解析，构建对应的 chunk，生成对应的哈希值。")]),s("li",null,[s("p",null,"contenthash 是针对文件内容级别的，只有自己模块的内容改变，哈希值才会改变。")])],-1),E=s("p",null,[s("a",{href:"https://juejin.cn/post/6844903942384517127",link:"card",target:"_blank",rel:"noreferrer"},"从源码看webpack的hash策略")],-1),I=s("p",null,[s("a",{href:"https://juejin.cn/post/7078589390422802440",link:"card",target:"_blank",rel:"noreferrer"},"webpack中文件打包 hash、chunkhash、contenthash 的区别")],-1),S=a('<p>可以使用 webpack 提供的模板字符串定义 bundle 文件名，下面是常用的模板字符串。</p><table><thead><tr><th>模板</th><th>描述</th><th>稳定性</th></tr></thead><tbody><tr><td>[name]</td><td>chunk 的名称</td><td>只要chunk名称不修改就不会变化</td></tr><tr><td>[hash]</td><td>根据所有 chunk 生成的 hash</td><td>工程某个chunk被修改就会引起变化</td></tr><tr><td>[chunkhash]</td><td>根据chunk生成的hash值</td><td>某个chunk被修改，只会引起被修改的chunk的hash</td></tr><tr><td>[contenthash]</td><td>根据bundle内容生成的hash</td><td>chunk中某个bundle被修改，只会引起被修改的bundle的hash</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">注意事项</p><ol><li>JS 文件的指纹设置 <code>&#39;[name][chunkhash:8].js&#39;</code>。</li></ol><p>JS 文件为什么不用 contenthash？</p><p>因为 JS 引入了 css 模块，若 css 改变，css 使用的是 contenthash，那么 css 的指纹变了。但对于引入 css 的 JS 模块来说，它的内容是没有发生变化的。</p><p>因此如果 js 文件使用 contenthash，则 js 模块的指纹不变，导致 js 无法引入更新后的 css 文件。</p><ol start="2"><li>css 文件的指纹设置 <code>&#39;[name][contenthash:8].css&#39;</code>。</li></ol><p>css 文件为什么不用 chunkhash？</p><p>js 使用的是 chunkhash，如果 js 模块发生改变，则 chunkhash 也会改变，导致它引入的 css 模块的 chunkhash 也跟着改变。</p><p>但这是不合理的，因为 css 文件本身的内容并没有发生改变。</p><p>因此 css 使用 contenthash，只与其自身内容有关，无视被哪个 js 模块引用。</p><ol start="3"><li>Images/Fonts 的指纹设置 <code>&#39;[name][hash:8].[ext]&#39;</code>。</li></ol><p>注意，图片字体的 hash，和 css、js 的 hash 概念不同，是按内容生成的，不是按编译生成的。</p></div><h2 id="chunkid" tabindex="-1">chunkId <a class="header-anchor" href="#chunkid" aria-hidden="true">#</a></h2><p>webpack 在随着 chunk 生成 bundle 时，会输出一个 chunkId。</p><p><img src="'+t+`" alt="chunkId"></p><p>生产环境下 chunkId 是以自增的数字命名，因此增加 chunk 或减少 chunk 时，会导致顺序乱掉。</p><p>chunkId 变了，那么引用到该 chunkId 的文件内容也变了，导致缓存失效。因此我们要固定 chunkId。</p><p>chunkId 生成策略：</p><ul><li><p>false：不使用任何算法，通过插件提供自定义算法。</p></li><li><p>natural：自然数 ID。</p></li><li><p>named：使用 name 值作为 ID，可读性高。</p></li><li><p>size：数字 ID，依据最小的初始下载大小。</p></li><li><p>total-size：数字 ID，依据最小的总下载大小。</p></li><li><p>deterministic: 在不同的编译中不变的短数字 ID。有利于长期缓存，生产模式默认开启。</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">chunkIds</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deterministic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,11),q=s("p",null,[s("a",{href:"https://juejin.cn/post/6844903924818771981",link:"card",target:"_blank",rel:"noreferrer"},"深入理解webpack的chunkId对线上缓存的思考")],-1),T=s("h2",{id:"manifest",tabindex:"-1"},[n("manifest "),s("a",{class:"header-anchor",href:"#manifest","aria-hidden":"true"},"#")],-1),P=s("p",null,"webpack manifest 是一个特殊的文件，它用于记录 webpack 编译后的所有资产（包括 JavaScript、css、图像等）的映射关系。这个映射关系可以帮助我们在代码中更方便地引用这些资产，并且在更新资产时，不用担心因为引用资源的路径改变导致的问题。",-1),N=s("p",null,"通常情况下，webpack manifest 会在生产构建中启用，并将其写入到磁盘的一个特定位置，以便在运行时可以快速访问。在生产环境使用 webpack manifest 可以提高应用程序的性能和可靠性。",-1),V=[i,u,h,D,d,y,F,b,k,C,A,m,_,f,g,w,x,j,v,E,I,S,q,T,P,N];function J($,z,G,B,M,R){return e(),p("div",null,V)}const O=l(r,[["render",J]]);export{L as __pageData,O as default};
