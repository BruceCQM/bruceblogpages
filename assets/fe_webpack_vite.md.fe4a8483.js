import{_ as n,o as a,c as l,a as e,b as s,d as p}from"./app.cf39be1c.js";const o="/bruceblogpages/assets/browser-run-import.1b6604d0.png",t="/bruceblogpages/assets/html-CORS-error.c8e46588.png",_=JSON.parse('{"title":"vite","description":"","frontmatter":{},"headers":[{"level":2,"title":"vite 原理","slug":"vite-原理","link":"#vite-原理","children":[]},{"level":2,"title":"webpack 核心：script 模块化","slug":"webpack-核心-script-模块化","link":"#webpack-核心-script-模块化","children":[]},{"level":2,"title":"vite 依赖预构建","slug":"vite-依赖预构建","link":"#vite-依赖预构建","children":[{"level":3,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":3,"title":"预构建做的事情","slug":"预构建做的事情","link":"#预构建做的事情","children":[]}]},{"level":2,"title":"vite 的原理和手动实现","slug":"vite-的原理和手动实现","link":"#vite-的原理和手动实现","children":[]}],"relativePath":"fe/webpack/vite.md","lastUpdated":1721206485000}'),r={name:"fe/webpack/vite.md"},c=e(`<h1 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-hidden="true">#</a></h1><h2 id="vite-原理" tabindex="-1">vite 原理 <a class="header-anchor" href="#vite-原理" aria-hidden="true">#</a></h2><p><strong>webpack 通过分析 js 中的 require 语句，得出当前 js 文件所有的依赖文件，通过递归的方式层层分析后，得到整个项目的依赖关系图。对图中不同的文件执行不同的 loader，比如使用 css-loader 解析 css 代码，最后基于这个依赖关系图读取到整个项目中的所有文件代码，进行打包处理后交给浏览器执行</strong>。</p><p>这样的构建过程，导致在调试代码之前，需要等待 webpack 的依赖收集过程，而当项目代码体量很大的时候，这个依赖收集的过程往往需要等待几十秒甚至几分钟，开发体验很差。</p><p>如果有办法做到更少的代码打包就好了！于是 bundless 的打包思路就诞生了，vite 便是这种思路。</p><h2 id="webpack-核心-script-模块化" tabindex="-1">webpack 核心：script 模块化 <a class="header-anchor" href="#webpack-核心-script-模块化" aria-hidden="true">#</a></h2><p>我们需要打包工具的核心原因，就是浏览器在执行代码的时候，本身没有一个很好的方式去读懂我们项目中各个文件的引用关系。</p><p>因此 webpack 把所有文件的引用关系都梳理好，并且将项目中所有文件的代码打包到一起，交给浏览器。浏览器找到入口文件执行即可。</p><p>但随着浏览器的进步，它开始能够读懂一些模块化的引入语法了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">add</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./index2.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">add：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index2.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> add </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Document</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如今，浏览器是可以正常运行这份代码的。那么浏览器是怎么处理这些文件的引用关系的？</p><p><img src="`+o+'" alt="浏览器运行 import 语句的 js 文件"></p><p>浏览器会将 import 语句处理成一个个 http 网络请求，去获取 import 引入的各个模块。</p><p>因为浏览器现在可以通过 <code>type=&quot;module&quot;</code> 的方式读懂项目中文件的模块化引入，因此，bundless 的思想得以发展。</p><div class="danger custom-block"><p class="custom-block-title">HTML 引用 JS 模块报错</p><p>HTML 引用了带有 import 语句的 js 文件，浏览器直接打开会报跨域的错误。</p><p><img src="'+t+`" alt="HTML 引用 JS 模块报错"></p><p>原本来自相同的目录或子目录的本地文件是同源的，但是这有安全隐患，后面浏览器将所有本地文件视为不透明来源，因此加载<strong>包含本地资源</strong>的本地文件会导致 CORS 错误。</p><p>相关链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSRequestNotHttp" target="_blank" rel="noreferrer">原因：CORS request not HTTP</a></p><p>解决办法：开启一个本地服务器，访问本地文件。最简便的方式就是安装 <code>Live Server</code> 插件，右键点击 HTML 文件，选择 <code>Open with Live Server</code>，一键打开。</p><p>相关链接：<a href="https://blog.csdn.net/u013946061/article/details/106077527" target="_blank" rel="noreferrer">引用import的JS报错：Access to script at &#39;file:&#39; from origin &#39;null&#39; has been blocked by CORS policy（3种解决手段）</a></p></div><h2 id="vite-依赖预构建" tabindex="-1">vite 依赖预构建 <a class="header-anchor" href="#vite-依赖预构建" aria-hidden="true">#</a></h2><ul><li><p>默认情况下，vite 会将 package.json 中生产依赖（dependencies）进行预构建，并将构建的内容缓存在 node_modules 的 <code>.vite</code> 文件中。启用 DevServer 时直接请求缓存的内容。</p></li><li><p>在 vite.config.js 中的 optimizeDeps 选项可以选择需要或不需要进行预构建的依赖的名称，vite 会根据该选项来确定是否对该依赖进行预构建。</p></li><li><p>在启动时添加 <code>--force options</code>，可以用来强制重新进行依赖预构建。</p></li></ul><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h3><ul><li><p>vite 中每个 import 都回触发一个请求，在依赖层级很深，涉及模块较多的情况下会出现很多的请求。</p></li><li><p>在 Chrome 中，同一个域名下只能同时支持 6 个 http 请求。</p></li></ul><p>以上两个原因导致页面加载比较缓慢，与 vite 主导的性能优势相违背。</p><h3 id="预构建做的事情" tabindex="-1">预构建做的事情 <a class="header-anchor" href="#预构建做的事情" aria-hidden="true">#</a></h3><ul><li><p>将其它格式（如 UMD、commonJS）的产物转换为 ESM 格式，使其在浏览器通过 <code>&lt;script type=&quot;module&quot;&gt;&lt;/script&gt;</code> 的方式正常加载。</p></li><li><p>打包第三方库的代码，将各个第三方库分散的文件合并到一起，减少 HTTP 请求数量，避免页面加载性能劣化。</p></li><li><p>在 vite 中可以直接通过依赖名称引入依赖，这是因为 vite 在依赖处理的过程中，如果看到了有非绝对路径或者相对路径的引用，它会开启路径补全。如：</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 补全为</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/node_modules/.vite/lodash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这些事情全部由性能优异的 esbuild 完成，因此也不会有明显的打包性能问题，反而是 vite 项目启动飞快的一个核心原因。</p><p>对于依赖的请求结果，vite 的 devserver 会做强缓存处理。</p>`,26),i=s("p",null,[s("a",{href:"https://juejin.cn/post/7218129062745178168",link:"static",target:"_blank",rel:"noreferrer"},"vite依赖预构建")],-1),D=s("p",null,[s("a",{href:"https://juejin.cn/post/7112718640977281055",link:"static",target:"_blank",rel:"noreferrer"},"Vite依赖预构建")],-1),F=s("h2",{id:"vite-的原理和手动实现",tabindex:"-1"},[p("vite 的原理和手动实现 "),s("a",{class:"header-anchor",href:"#vite-的原理和手动实现","aria-hidden":"true"},"#")],-1),y=s("p",null,[s("a",{href:"https://juejin.cn/post/7280747221510144054",link:"static",target:"_blank",rel:"noreferrer"},"面试官：”Vite为什么快？“")],-1),d=[c,i,D,F,y];function u(b,h,C,m,A,v){return a(),l("div",null,d)}const f=n(r,[["render",u]]);export{_ as __pageData,f as default};
